
  @import url('https://fonts.googleapis.com/css2?family=Itim&family=Raleway&display=swap');



/* it's common practice to define global custom properties (CSS variables) within the :root selector. This makes the custom properties accessible throughout the entire document, allowing you to maintain consistent styling more easily.  */
:root {
  --primary--clr: #04a922;
  --primary-color-transparent: rgba(4, 169, 34, 0.8);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* ! */
  font-family: 'Raleway', sans-serif;
}

body {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #e2e1dc;
  background-image: url("./images/christmas.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  background-attachment: fixed;
  transition: all 0.3s ease-in-out;
}

/* min - height, If the content inside .container is shorter than 850px, the container will still occupy 850px in height. */
/* If the content inside .container is taller than 850px, the container will expand to fit the content, thus exceeding the min-height of 850px.  */
.container {
  position: relative;
  width: 1200px;
  min-height: 850px; /* ! */
  padding: 5px;
  color: #fff;
  display: flex;
  border-radius: 10px;
  background-color: #121313bc;
}

/* Left side of the container */
.left {
  width: 60%;
  padding: 20px;
}

.calender {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: space-between;
  color: #5a5758;
  border-radius: 5px;
  background-color: #ffffff;
}
.date {
  font-size: 3rem;
}
/* left: 100%; for both the ::before and ::after pseudo-elements, places their left edges to start right where the parent element (calender in your case) ends.  */
/* left: 100%; tells the browser to place the left edge of the child(both after and before) elements exactly where the right edge of the parent element is. That's why the child element appears to the right of the parent element.  */
/* top: 50%; means the top edge of the child element starts at the middle of the parent element's height.  */
/* left: 100%; means the left edge of the child element starts at the far right edge of the parent element, effectively placing it to the right of the parent. */
/* after initially placing its top edge at the 50% mark of the parent element's height (due to top: 50%;), the transform: translateY(-50%); will move it back up by 50% of its own(child) height.  */
.calender::before,
.calender::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 100%;
  width: 12px;
  height: 97%;
  border-radius: 0 5px 5px 0;
  background-color: #d3d5d6d7;
  transform: translateY(-50%);
}

/* 
.calender::before styles:
- height: Sets the height to 94% of the parent (.calender) element's height.
- left: Positions the left edge at 100% of the parent's width, then adds 12 pixels. 
        Essentially, starts from the right edge of the parent and moves 12 pixels further right.
- background-color: Sets the background to a specific shade of gray (rgb(153, 153, 153)).
*/
.calender::before {
  height: 94%;
  left: calc(100% + 12px);
  background-color: rgb(153, 153, 153);
}

/* text-transform: capitalize; changes the text to ensure that the first letter of each word in the text is capitalized, while the rest of the letters in each word are in lowercase.  */
.calender .month {
  width: 100%;
  height: 150px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 50px;
  font-size: 1.2rem;
  font-weight: 500;
  text-transform: capitalize;
}

.calender .month .prev,
.calender .month .next {
  cursor: pointer;
  transition: color 0.3s ease-in-out;
}

.calender .month .prev:hover,
.calender .month .next:hover {
  color: var(--primary--clr);
}

.calender .weekdays {
  width: 100%;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 20px;
  font-size: 1rem;
  font-weight: 500;
  text-transform: capitalize;
}

.calender .weekdays div {
  width: 14.28%;
  height: 100%;
  font-size: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.calender .days {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  padding: 0 20px;
  font-size: 1.7rem;
  font-weight: 500;
  margin-bottom: 20px;
}

/* if you have a big box with smaller boxes inside, justify-self could tell one of those small boxes to go to the right side of the big box, while the others stay on the left. */

/* In your code, justify-self: unset; basically means, "I don't want this single item to have any special position. Let it follow whatever rule its parent has set." */
.calender .days .day {
  width: 14.28%;
  height: 90px;
  display: flex;
  align-items: center;
  justify-self: unset;
  justify-content: center;
  cursor: pointer;
  color: var(--primary--clr);
  border: 1px solid #f4efef;
  transition: background-color 0.2s ease-in-out;
}

/* 
this selector targets .day elements that are:

Inside a .calender element.
Being hovered over. 
*/
/* 
Do not have the classes .prev-date or .next-date. 
*/
.calender .day:not(.prev-date, .next-date):hover {
  color: #ffffff;
  background-color: var(--primary-color-transparent);
}

.calender .days .prev-date,
.calender .days .next-date {
  color: #b3b3b3;
}

.calender .days .active {
  position: relative;
  font-size: 2rem;
  color: #fff;
  background-color: var(--primary--clr);
}

/* content: ''; makes the ::before element but keeps it empty.
position: absolute; positions ::before relative to its closest positioned ancestor.
top: 0; left: 0; places ::before at the top-left corner of the .active element.
width: 100%; height: 100%; sets ::before to be the same size as the .active element.
box-shadow: 0 0 10px 2px var(--primary--clr); adds a colored shadow around ::before. */
.calender .days .active::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  box-shadow: 0 0 10px 2px var(--primary--clr);
}

.calender .days .today {
  font-size: 3.4rem;
  font-weight: bold;
  /* font-weight: bold; */
}

/*! By using .calender .days .event and .calender .days .event::after, i am being more specific, targeting only .event elements that are inside .days which are in turn inside .calender. */

.calender .days .event {
  position: relative;
}
/* .calender .days .event::after rule creates a pseudo-element that acts like a "bottom bar" for any element that has the .event class and is inside .days and .calender. The bar will be positioned at the bottom  */
.calender .days .event::after {
  content: "";
  position: absolute;
  bottom: 10px;
  left: 50%;
  width: 75%;
  height: 6px;
  border-radius: 50px;
  transform: translateX(-50%);
  background-color: var(--primary--clr);
}

/* This syntax allows you to change the appearance of the ::after pseudo-element when the parent .event element is hovered over. */
.calender .event:hover::after {
  background-color: #fff;
}

/* if an element has both .active and .event classes and is within a .calender, then the styles specified under .calender .active.event::after will be applied to its ::after pseudo-element.  */
.calender .active.event::after {
  background-color: #fff;
  /* bottom: 10%; */
}

.calender .active.event {
  padding-bottom: 10px;
}

.calender .goto-today {
  width: 100%;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 5px;
  padding: 0 20px;
  margin-bottom: 20px;
  color: var(--primary--clr);
}

.calender .goto-today .goto {
  display: flex;
  width: 45%;
  align-items: center;
  border-radius: 5px;
  overflow: hidden;
  border: 1px solid var(--primary--clr);
}

.calender .goto-today .goto input {
  width: 100%;
  height: 30px;
  outline: none;
  border: none;
  border-radius: 5px;
  padding: 0 0 0 20px;
  margin-top: 2.5px;
  color: var(--primary--clr);
}

.calender .goto-today button {
  padding: 8px 10px;
  font-size: 17px;
  border: 1px solid var(--primary--clr);
  border-radius: 5px;
  background-color: transparent;
  cursor: pointer;
  color: var(--primary--clr);
}

.calender .goto-today button:hover {
  color: #fff;
  background-color: var(--primary--clr);
}

.calender .goto-today .goto button {
  border: none;
  border-left: 1px solid var(--primary--clr);
  border-radius: 0;
}
.date-input {
  font-size: 1.3rem;
}

.date-input::placeholder {
  font-size: 1.3rem;
}

/* Right side of the calander */
.container .right {
  position: relative;
  width: 40%;
  min-height: 100%;
  padding: 20px 0;
}

.right .today-date {
  width: 100%;
  height: 50px;
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center; /* ! */
  justify-content: space-between;
  padding: 0 40px;
  padding-left: 70px;
  margin-top: 50px;
  margin-bottom: 40px;
  text-transform: capitalize;
}

.today-date .event-day {
  font-size: 2rem;
  font-weight: 500;
}

.today-date .event-date {
  font-size: 1.3rem;
  font-weight: 400;
  color: #878895;
}

.events {
  width: 100%;
  height: 100%;
  max-height: 600px;
  overflow-x: hidden; /* ! */
  overflow-y: auto; /* ! */
  display: flex;
  flex-direction: column;
  padding: 4px;
}

.events .event {
  position: relative;
  width: 95%;
  min-height: 70px;
  display: flex;
  justify-content: center;
  flex-direction: column;
  gap: 5px;
  padding: 0 20px;
  padding-left: 50px;
  color: #fff;
  background: linear-gradient(90deg, #203e26, transparent); /* ! */
  transition: all 0.5s ease-in-out;
}

.events .event:nth-child(even) {
  background: transparent;
}

.events .event:hover {
  background: linear-gradient(90deg, #3c894b, transparent);
}

.events .event .title {
  display: flex;
  align-items: center;
  pointer-events: none; /* ! */
}

.events .event .title .event-title {
  font-size: 1.4rem;
  font-weight: 400;
  margin-left: 20px;
}

.events .event .title i {
  color: var(--primary--clr);
  font-size: 0.5rem;
  transition: color 0.3s ease-in-out;
}

.events .event:hover .title i {
  color: #a6ff00;
}

.events .event .event-time {
  font-size: 1rem;
  font-weight: 400;
  color: #9f9fac;
  pointer-events: none;
}

.events .event:hover .event-time {
  color: #fff;
}

.events .event::after {
  content: "✯";
  position: absolute;
  top: 50%;
  right: 0;
  font-size: 2.5rem;
  display: none;
  align-items: center;
  justify-content: center;
  opacity: 0.4;
  color: #3c894b;
  transform: translateY(-50%);
}

.events .event:hover::after {
  display: flex;
}

.events .no-event {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  font-weight: 500;
  color: #878787;
}

/* Selector: .add-event-wrapper

This CSS will target any HTML element with the class "add-event-wrapper."
position: absolute;

The element is positioned relative to its nearest positioned ancestor (if any); otherwise, it's placed relative to the initial containing block.
bottom: 100px;

The element's bottom edge is placed 100 pixels away from the bottom edge of its nearest positioned ancestor.
left: 50%;

The element's left edge is placed at the midpoint (50%) of its nearest positioned ancestor.
width: 90%;

The width of the element will be 90% of its containing element.

overflow: hidden;
If the content inside the element exceeds its size, the extra content will be hidden and won't be visible or cause overflow.

border-radius: 5px;

The corners of the element will be slightly rounded with a radius of 5 pixels.
background-color: #fff;

The background color of the element is set to white.
transform: translateX(-50%);

Moves the element leftwards by 50% of its own width. This, in combination with left: 50%;, centers the element horizontally within its container.
transition: max-height 0.5s;

If there are any changes to the max-height property of the element, this change will animate over half a second (0.5 seconds). */
/* ! Note that left property and transition property are using the same trick as before */

.add-event-wrapper {
  position: absolute;
  bottom: 100px;
  left: 50%;
  max-height: 0;
  width: 90%;
  overflow: hidden;
  border-radius: 5px;
  background-color: #fff;
  transform: translateX(-50%);
  transition: max-height 0.4s;
}

/* With a space: .add-event-wrapper .active
This selector targets an element with the class active that is a descendant (nested inside, at any level) of an element with the class add-event-wrapper.

Without a space: .add-event-wrapper.active
This selector targets a single element that has both the class add-event-wrapper and the class active simultaneously. */

.add-event-wrapper.active {
  max-height: 300px;
}

.add-event-header {
  width: 100%;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 20px;
  color: #373c4f;
  border-bottom: 1px solid #f5f5f5;
}

.add-event-header .close {
  font-size: 1.5rem;
  cursor: pointer;
}

.add-event-header .close:hover {
  color: var(--primary--clr);
}

.add-event-header .title {
  font-size: 1.2rem;
  font-weight: 500;
}

.add-event-body {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  gap: 5px;
  padding: 20px;
}

.add-event-body .add-event-input {
  width: 100%;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 10px;
}

.add-event-body .add-event-input input {
  width: 100%;
  height: 100%;
  outline: none;
  border: none;
  border-bottom: 1px solid #f5f5f5;
  padding: 0 10px;
  font-size: 1rem;
  font-weight: 400;
  color: var(--primary--clr);
}

/* Ques: why place holder have two colon and focus have one */

/* Pseudo-classes: These are used to define special states of an element. For example, :hover and :focus are pseudo-classes. They are used to style an element when it's being hovered over or has focus, respectively. Pseudo-classes use a single colon. */

/* Pseudo-elements: These are used to style specific parts of an element. The ::before and ::after pseudo-elements, for instance, allow you to insert content before or after the content of an element. Similarly, ::placeholder is a pseudo-element that lets you style the placeholder text of an input field. Pseudo-elements use double colons. */

.add-event-body .add-event-input input::placeholder {
  color: #a5a5a5;
}

.add-event-body .add-event-input input:focus {
  border-color: var(--primary--clr);
}

.add-event-body .add-event-input input:focus::placeholder {
  color: #337d39;
}

.add-event-footer {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.add-event-btn {
  height: 40px;
  font-size: 1rem;
  font-weight: 500;
  outline: none;
  border: none;
  color: #fff;
  background-color: var(--primary--clr);
  border-radius: 5px;
  cursor: pointer;
  padding: 5px 10px;
  border: 2px solid var(--primary--clr);
}

.add-event-btn:hover {
  color: var(--primary--clr);
  background-color: transparent;
}
.add-event {
  position: absolute;
  bottom: 30px;
  right: 30px;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  color: var(--primary--clr);
  border: 2px solid var(--primary--clr);
  opacity: 0.5;
  border-radius: 50%;
  background-color: transparent;
  cursor: pointer;
}

.add-event:hover {
  opacity: 1;
}

.add-event i {
  pointer-events: none;
}
